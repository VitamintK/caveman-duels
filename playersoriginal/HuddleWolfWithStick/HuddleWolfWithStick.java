import java.util.Random;public class HuddleWolfWithStick {     public static void main(String[] args) {        if (args.length == 0 || !args[0].contains(",")) {            System.out.print("S");            return;        }        String[] history = args[0].split(",");        int mySharpness = getSharpness(history[0]);        int enemySharpness = getSharpness(history[1]);        Random gen = new Random(System.currentTimeMillis());        // win game        if (mySharpness >= 5) {            System.out.print("P");            return;        }        // time running out; can attack for remainder of game        // spam poke for win or tie        if (100 - history[0].length() <= mySharpness) {            System.out.print("P");            return;        }        // time running out; enemy cannot get sword before the end        // spam block for tie        if (100 - history[0].length() < (5 - enemySharpness)) {            System.out.print("B");            return;        }        // safe sharpen        if (enemySharpness == 0 || isBlocker(history[1])) {            System.out.print("S");            return;        }        // cannot attack, so sharpen or block        if (enemySharpness > 0 && mySharpness == 0) {            int m = (gen.nextInt(2));            switch(m) {                case 0: System.out.println('B');                     break;                case 1: System.out.println('S');                     break;            }            return;        }        // if tied, random move        if (enemySharpness > 0 && mySharpness > 0 && enemySharpness == mySharpness) {            int m = (gen.nextInt(3));            switch(m) {                case 0: System.out.println('B');                     break;                case 1: System.out.println('S');                     break;                case 2: System.out.println('P');                     break;            }            return;        }        // if losing, play defensive (B - 40%, S - 20%, P - 40%)        if (enemySharpness > 0 && mySharpness > 0 && enemySharpness > mySharpness) {            int m = (gen.nextInt(5));            switch(m) {                case 0:                 case 1: System.out.println('B');                     break;                case 2: System.out.println('S');                     break;                case 3:                 case 4: System.out.println('P');                    break;            }            return;        }        // if winning, go offensive(B - 20%, S - 40%, P - 40%)        if (enemySharpness > 0 && mySharpness > 0 && enemySharpness < mySharpness) {            int m = (gen.nextInt(5));            switch(m) {                case 0: System.out.println('B');                     break;                case 1:                case 2: System.out.println('S');                     break;                case 3:                 case 4: System.out.println('P');                    break;            }            return;        }    }    private static int getSharpness(String history) {        int sharpness = 0;        for (char move : history.toCharArray()) {            if (move == 'S') {                sharpness++;            }             if (move == 'P' && sharpness > 0) {                sharpness--;            }            if (move == 'P' && sharpness >= 5) {                sharpness = 0;            }        }        return sharpness;    }    private static boolean isBlocker(String history) {        if (history.length() < 7) {            return false;        }        for (int i = history.length() - 1; i > history.length() - 7; i--) {            if (history.charAt(i) != 'B') {                return false;            }        }        return true;    }}