use strict;use warnings;use List::Util 'sum';sub random { $_[ rand @_ ] }sub grunt { print $_[0]; exit 0 }sub rounds { length $_[0] }sub sharpness {    my $combatant = shift;    print $combatant, "\n";    my $sharpens = () = $combatant =~ /S/ig;    my $pokes    = () = $combatant =~ /P/ig;    my $sharpness = $sharpens - $pokes;    return   $sharpness < 0 ? 0           : $sharpness > 5 ? 5           : $sharpness}sub aggression {    my ( $me, $he ) = map { rounds( $_ ) > 5 ? substr( $_, -5 ) : $_ } @_;    my $score = 0;    for ( 0 .. length $me ) {        $score += substr( $me, $_, 1 ) eq 'B' && substr( $he, $_, 1 ) eq 'P';        $score += substr( $me, $_, 1 ) eq 'S' && substr( $he, $_, 1 ) eq 'B';        unless ( $score == 0 ) {            $score -= substr( $me, $_, 1 ) eq 'B' && substr( $he, $_, 1 ) eq 'S';            $score -= substr( $me, $_, 1 ) eq 'P' && substr( $he, $_, 1 ) eq 'B';        }    }    return $score <=> 0;}sub touche { sharpness( $_[0] ) == 5 }my ( $me , $he ) = @ARGV ? split ',' , shift : ( '', '' );my %moves = (    '-1' => [ 'P', 'S', 'P', 'S', 'P' ],     '0' => [ 'P', 'S', 'P', 'S', 'P' ],     '1' => [ 'P', 'P', 'S', 'P', 'P' ],);grunt 'S' if rounds( $me ) == 0;grunt 'P' if rounds( $me ) == 1            or touche( $me )              or sharpness( $he ) == 4                or sharpness( $me ) == 0 && sharpness( $he ) > 0;grunt random( 'S', 'P' ) if sharpness( $me ) == 0;grunt random( @{ $moves{ aggression( $me, $he ) || sharpness( $me ) <=> sharpness( $he ) } } );